plot_ly(sample, x = ~state_name, y = ~saleamount,color = ~clarity ,type = "bar")
help("plot_ly")
plot_ly(sample, x = ~state_name, y = ~saleamount,color = ~Species ,type = "bar")
plot_ly(sample, x = ~state_name, y = ~saleamount,color = ~I("red") ,type = "bar")
help("plot_ly")
plot_ly(sample, x = ~state_name, y = ~saleamount,color = ~I("#eda6db") ,type = "bar")
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "heatmap")
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "histogram")
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "histogram2dcontour")
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "sankey")
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "pointcloud")
surf
library(dplyr)
library(readr)
library(plotly)
sample <- read_csv("F:/Course/Project 5/cran/www/Sample Data_Data Portal.csv")
sample$state_name <- as.factor(sample$state_name)
sample$district_name<- as.factor(sample$district_name)
sample$transcnt <- as.factor(sample$transcnt)
sample$saleamount <- as.factor(sample$saleamount)
sample$merchant_name <- as.factor(sample$merchant_name)
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "bar")
sample1 <- sample(order[sample$saleamount,]
sample1 <- sample(order[sample$saleamount,])
shiny::runApp()
runApp()
runApp()
runApp()
plot_ly(sample, x = ~merchant_name, y = ~transcnt, type = "scatter", color = "#a1ef5d")
runApp()
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scatter", color = "#a1ef5d")
runApp()
runApp()
runApp()
runApp()
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "carpet")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "area")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "choropleth")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "parcoords")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "parcoor
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "barplot")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "bar")
plot_ly(sample, x = ~merchant_name, y = ~saleamount,z=~transcnt, type = "bar")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "histogram")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "bar")
plot_ly(sample, x = ~product_name, y = ~saleamount, type = "bar")
m <- plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scatter", color = "#a1ef5d")
m + theme(axis.text.x = element_text(angle = 45, hjust = 1))
m <- plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scatter", color = "#a1ef5d")
m + theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(m)
m <- plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scatter", color = "#a1ef5d")
m + theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(m)
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scatter", color = "#a1ef5d")+coord_flip()
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scatter", color = "#a1ef5d")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "pie
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "pie")
runApp()
runApp()
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "pie")
plot_ly( x = ~merchant_name, y = ~saleamount, type = "pie")
help()
help("pie")
plot_ly( x = ~merchant_name, y = ~saleamount, type = "piee")
sample <- read_csv("F:/Course/Project 5/cran/www/Sample Data_Data Portal.csv")
plot_ly( x = ~merchant_name, y = ~saleamount, type = "piee")
library(dplyr)
library(readr)
library(plotly)
sample <- read_csv("F:/Course/Project 5/cran/www/Sample Data_Data Portal.csv")
sample$state_name <- as.factor(sample$state_name)
sample$district_name<- as.factor(sample$district_name)
sample$transcnt <- as.factor(sample$transcnt)
sample$saleamount <- as.factor(sample$saleamount)
sample$merchant_name <- as.factor(sample$merchant_name)
sample1 <- sample(order[sample$saleamount,])
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "bar")
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "pie")
plot_ly(sample, x = ~state_name, y = ~saleamount ,type = "bar")
plot_ly(sample, x = ~state_name, y = ~saleamount, z = ~transcnt ,type = "bar")
plot_ly(sample, x = ~state_name, y = ~transcnt, type = "bar")
runApp()
runApp()
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "mesh3d")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, z = ~transcnt, type = "mesh3d")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scattermapbox")
plot_ly(sample, x = ~merchant_name, y = ~saleamount,z = ~transcnt, type = "scattermapbox")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "box")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "contour")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scatterternary")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "sankey")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "scattergeo")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "markers")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "heatmapgl")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "pointcloud")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "ohlc")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "candlestick")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, type = "area")
runApp()
plot_ly(sample, x = ~merchant_name, y = ~transcnt, type = "box")
plot_ly(sample, x = ~merchant_name, y = ~saleamount, z = ~transcnt)
plot_ly(sample, x = ~merchant_name, y = ~saleamount, z = ~transcnt)
plot_ly(sample, x = ~merchant_name, y = ~saleamount, z = ~transcnt)
plot_ly(sample, x = ~merchant_name, y = ~saleamount, z = ~transcnt)
plot_ly(sample, x = ~product_name, y = ~transcnt ,type = "bar")
x <- sample[order(sample$product_name), ]
x1 <- sample[order(sample$product_name), ]
plot_ly(x1, x = ~product_name, y = ~transcnt ,type = "bar", )
plot_ly(x1, x = ~product_name, y = ~transcnt ,type = "bar")
help("plot_ly")
sample <- sample[order(sample ~), ]
), ]
sample <- sample[order(sample), ]
sample <- sample[order(sample$saleamount), ]
plot_ly(sample, x = ~product_name, y = ~transcnt ,type = "bar")
ggplotly(p = ggplot2::last_plot())
runApp()
runApp()
runApp()
plot_ly(sample, x = ~merchant_name, y = ~transcnt, type = "box", color = "#58e83e")
plot_ly(sample, x = ~merchant_name, y = ~transcnt, type = "box", color = "green")
plot_ly(sample, x = ~merchant_name, y = ~transcnt, type = "box", color = "#ef3d10")
plot_ly(sample, x = ~merchant_name, y = ~transcnt, type = "box", colors  = "#ef3d10")
help("plot_ly")
plot_ly(sample, x = ~merchant_name, y = ~transcnt, type = "box", color = I("#ef3d10"))
plot_ly(sample, x = ~merchant_name, y = ~transcnt, type = "box", color = I("#73ef3e"))
runApp()
q <- ggplot(sample, aes(x = state_name, fill = transcnt))+ geom_histogram(binwidth = 3, stat = "count")+ theme_bw()+
labs(y = "Transactions")
q + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplotly(p = ggplot2::last_plot()
ggplotly(p = ggplot2::last_plot())
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
library(digest)
library(bit)
library(shiny)
library(shinySignals)
library(dplyr)
library(shinydashboard)
library(bubbles)
source("bloomfilter.R")
runApp()
shiny::runApp()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
library(digest)
library(bit)
library(shiny)
library(shinySignals)
library(dplyr)
library(shinydashboard)
library(bubbles)
source("bloomfilter.R")
runApp()
shiny::runApp()
example
example(lm)
demo(persp)
demo(graphics
)
demo(plotmath)
x <- scan()
x
v <- scan()
v
print(v)
shiny::runApp()
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
runApp()
library(shiny)
library(shinydashboard)
library(digest)
library(bit)
library(shiny)
library(shinySignals)
library(dplyr)
library(shinydashboard)
library(bubbles)
source("bloomfilter.R")
runApp()
runApp()
runApp()
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
library(shiny)
library(shinydashboard)
library(digest)
library(bit)
library(shiny)
library(shinySignals)
library(dplyr)
library(shinydashboard)
library(bubbles)
source("bloomfilter.R")
runApp()
runApp()
runApp('F:/Course/Project 5/test')
runApp('F:/Course/Project 5/test')
runApp('F:/Course/Project 5/test')
install.packages("leaflet")
runApp('F:/Course/Project 5/test')
runApp('F:/Course/Project 5/test')
runApp('F:/Course/Project 5/test')
m  #
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  #
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=28.5508147, lat=77.2682351, popup="The birthplace of R")
m  #
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=77.2682351 , lat=28.5508147, popup="The birthplace of R")
m  #
library(leaflet)
content <- paste(sep = "<br/>",
"<b><a href='https://www.csc.gov.in/'>CSC E Governance</a></b>",
"Government Office ",
"238, Okhla Phase 3"
)
leaflet() %>% addTiles() %>%
addPopups(77.2682566, 28.5512294, content,
options = popupOptions(closeButton = FALSE)
)
library(leaflet)
content <- paste(sep = "<br/>",
"<b><a href='https://www.csc.gov.in/'>CSC E Governance</a></b>",
"Government Office ",
"238, Okhla Phase 3"
)
leaflet() %>% addTiles() %>%
addMarkers(
addPopups(77.2682566, 28.5512294, content,
options = popupOptions(closeButton = FALSE)
)
)
library(leaflet)
content <- paste(sep = "<br/>",
"<b><a href='https://www.csc.gov.in/'>CSC E Governance</a></b>",
"Government Office ",
"238, Okhla Phase 3"
)
leaflet(df) %>% addTiles() %>%
addMarkers(~77.2682566, ~28.5512294, popup = ~htmlEscape(Name))
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("http://leafletjs.com/examples/choropleth/us-states.js", what = "sp")
states <- geojsonio::geojson_read("www/india_state.geojson", what = "sp")
states <- geojsonio::geojson_read("F:/Course/Project 5/test/www/india_state.geojson", what = "sp")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
states <- geojsonio::geojson_read("F:/Course/Project 5/test/www/india_state.geojson", what = "sp")
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g people / mi<sup>2</sup>",
states$name, states$density
) %>% lapply(htmltools::HTML)
leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %>%
addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL,
position = "bottomright")
states <- geojsonio::geojson_read("F:/Course/Project 5/test/www/india_state.geojson", what = "sp")
class(states)
names(states)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m %>% addPolygons()
runApp()
runApp()
runApp()
library(shiny)
library(shinySignals)
library(dplyr)
library(shinydashboard)
library(bubbles)
source("bloomfilter.R")
library(digest)
library(bit)
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
library(shiny)
library(shinydashboard)
runApp()
runApp()
runApp()
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
library(shiny)
library(shinydashboard)
library(digest)
library(bit)
library(shiny)
library(shinySignals)
library(dplyr)
library(shinydashboard)
library(bubbles)
source("bloomfilter.R")
runApp()
runApp()
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
library(digest)
library(bit)
library(shiny)
library(shinydashboard)
library(shiny)
library(shinySignals)
library(dplyr)
library(shinydashboard)
library(bubbles)
source("bloomfilter.R")
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
shiny::runApp()
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
shiny::runApp()
library(ggplot2)
library(shinythemes)
library(readr)
library(tm)
library(SnowballC)
library(wordcloud)
library(plotly)
shiny::runApp()
